package routes

import (
	"main-service/internal/handlers"

	tb "gopkg.in/telebot.v3"
)

func SetupRoutes(bot *tb.Bot, h *handlers.Handler) {

	bot.Handle("/start", h.Start)

	bot.Handle(tb.OnText, h.HandleText)

	// first buttons
	{
		bot.Handle(&handlers.BtnCreateFamily, h.CreateFamily)

		bot.Handle(&handlers.BtnJoinFamily, h.JoinFamily)

		bot.Handle(&handlers.BtnEnterMyFamily, h.EnterMyFamily)
	}

	// enter my family
	{
		bot.Handle(&tb.InlineButton{Unique: "select_family"}, h.SelectMyFamily)

		bot.Handle(&handlers.BtnNextPage, h.NextPage)

		bot.Handle(&handlers.BtnPrevPage, h.PrevPage)

		bot.Handle(&tb.InlineButton{Unique: "go_home"}, h.GoHome)
	}

	// family menu
	{
		bot.Handle(&handlers.MenuViewMembers, h.GetMembers)

		{
			bot.Handle(&handlers.MenuLeaveFamily, h.LeaveFamily)

			bot.Handle(&handlers.BtnLeaveFamilyNo, h.CancelLeaveFamily)
			bot.Handle(&handlers.BtnLeaveFamilyYes, h.ProcessLeaveFamily)
		}

		// admin menu
		{
			bot.Handle(&tb.InlineButton{Unique: "delete_member"}, h.DeleteMember)

			bot.Handle(&handlers.BtnMemberDeleteNo, h.CancelMemberDeletion)
			bot.Handle(&tb.InlineButton{Unique: "delete_member_yes"}, h.ProcessMemberDeletion)
		}

		{
			bot.Handle(&handlers.MenuDeleteFamily, h.DeleteFamily)

			bot.Handle(&handlers.BtnFamilyDeleteNo, h.CancelFamilyDeletion)
			bot.Handle(&handlers.BtnFamilyDeleteYes, h.ProcessFamilyDeletion)
		}

		bot.Handle(&handlers.MenuCreateNewCode, h.CreateNewInviteCode)

		bot.Handle(&handlers.MenuGoHome, h.GoHome)
	}

	//bot.Handle("/family", func(c tb.Context) error {
	//	userID := c.Sender().ID
	//
	//	families, err := repo.GetFamiliesByUserID(userID)
	//	if err != nil {
	//		sl.Error("failed to get family", slog.Int("userID", int(userID)), slog.String("err", err.Error()))
	//		return c.Send("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ –ø—Ä–æ —Å—ñ–º'—é.")
	//	}
	//
	//	if len(families) == 0 {
	//		return c.Send("–¢–∏ —â–µ –Ω–µ –ø—Ä–∏—î–¥–Ω–∞–Ω–∏–π –¥–æ –∂–æ–¥–Ω–æ—ó —Å—ñ–º‚Äô—ó.")
	//	}
	//
	//	msg := "–¢–≤–æ—ó —Å—ñ–º‚Äô—ó:\n"
	//	for _, f := range families {
	//		users, err := repo.GetAllUsersInFamily(&f)
	//		if err != nil {
	//			sl.Error("failed to get users", slog.Int("userID", int(userID)), slog.String("err", err.Error()))
	//			return c.Send("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —Å—ñ–º'—ó. –°–ø—Ä–æ–±—É–π –ø—ñ–∑–Ω—ñ—à–µ.")
	//		}
	//
	//		usersList := make([]string, len(users))
	//		for _, u := range users {
	//			usersList = append(usersList, u.Username)
	//		}
	//
	//		msg += fmt.Sprintf("üî∏ %s (ID: %d). \n–£—á–∞—Å–Ω–∏–∫–∏: %s\n", f.Name, f.ID, strings.Join(usersList, ", "))
	//	}
	//
	//	return c.Send(msg)
	//})
	//
	//button := tb.InlineButton{
	//			Unique: "mono_link",
	//			Text:   "–°–∏–ª–∫–∞",
	//			URL:    "https://api.monobank.ua/",
	//		}
	//
	//		inlineKeys := [][]tb.InlineButton{
	//			{button},
	//		}
	//
	//		bot.Send(c.Sender(), "–ü—Ä–∏–≤—ñ—Ç, —Ü–µ–π –±–æ—Ç –¥–æ–ø–æ–º–æ–∂–µ –¥—ñ–∑–Ω–∞—Ç–∏—Å—è —Ä–∞—Ö—É–Ω–æ–∫ –Ω–∞ –∫–∞—Ä—Ç—ñ monobank.\n\n–ü–µ—Ä–µ–π–¥–∏ –ø–æ —Å–∏–ª—Ü—ñ –≤–Ω–∏–∑—É —Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤ —Å–≤—ñ–π —Ç–æ–∫–µ–Ω –≤ —Ü–µ–π —á–∞—Ç.", &tb.ReplyMarkup{
	//			InlineKeyboard: inlineKeys,
	//		})
	//
	//		bot.Handle(tb.OnText, func(c tb.Context) error {
	//			return c.Send("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!")
	//		}, middlewares.CheckTokenValid)
	//		return nil

	//h.bot.Handle("/balance", func(c tb.Context) error {
	//	buttonBlack := tb.InlineButton{Unique: "black", Text: "–ß–µ—Ä–Ω–∞—è"}
	//	buttonWhite := tb.InlineButton{Unique: "white", Text: "–ë–µ–ª–∞—è"}
	//
	//	inlineKeysCardType := [][]tb.InlineButton{
	//		{buttonBlack},
	//		{buttonWhite},
	//	}
	//
	//	h.bot.Send(c.Sender(), "–ù–∞–ø–∏—à–∏ –∫–∞–∫–æ–≥–æ —Ç–∏–ø–∞ –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç—ã —Ö–æ—Ç–µ–ª –±—ã —É–∑–Ω–∞—Ç—å –±–∞–ª–∞–Ω—Å.", &tb.ReplyMarkup{InlineKeyboard: inlineKeysCardType})
	//
	//	h.bot.Handle(&buttonBlack, func(c tb.Context) error {
	//		buttonHryvnia := tb.InlineButton{Unique: "hryvnia", Text: "–ì—Ä–∏–≤–Ω—ã"}
	//		buttonZloty := tb.InlineButton{Unique: "zloty", Text: "–ó–ª–æ—Ç—ã–µ"}
	//		buttonDollars := tb.InlineButton{Unique: "dollars", Text: "–î–æ–ª–ª–∞—Ä—ã"}
	//
	//		inlineKeysCurrency := [][]tb.InlineButton{
	//			{buttonHryvnia},
	//			{buttonZloty},
	//			{buttonDollars},
	//		}
	//
	//		h.bot.Send(c.Sender(), "–¢–µ–ø–µ—Ä—å –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –≤ –∫–∞–∫–æ–π –≤–∞–ª—é—Ç–µ —Ç—ã —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –±–∞–ª–∞–Ω—Å.", &tb.ReplyMarkup{InlineKeyboard: inlineKeysCurrency})
	//
	//		h.bot.Handle(&buttonZloty, func(c tb.Context) error {
	//			rabbitDataSelect := &messaging.RabbitMQ{
	//				Operation: "select",
	//				User: &entities.User{
	//					ID: c.Sender().ID,
	//				},
	//			}
	//
	//			userFromBank, err := h.rabbitMQConn.SetupAndConsume(messaging.BankService, rabbitDataSelect)
	//			if err != nil || userFromBank == nil {
	//				h.log.Error("failed to get user from db", slog.String("error", err.Error()))
	//				return c.Send("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.")
	//			}
	//
	//			rabbitDataUser := &messaging.RabbitMQ{
	//				Operation: "user",
	//				User: &entities.User{
	//					Token:    userFromBank.Token,
	//					CardType: buttonBlack.Unique,
	//					Currency: buttonZloty.Unique,
	//				},
	//			}
	//
	//			userFromApi, err := h.rabbitMQConn.SetupAndConsume(messaging.ApiService, rabbitDataUser)
	//			if err != nil || userFromApi == nil {
	//				h.log.Error("failed to get user data from api service", slog.String("error", err.Error()))
	//				return c.Send("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
	//			}
	//
	//			return c.Send("–ë–∞–ª–∞–Ω—Å: " + userFromApi.Balance + " –¢–∏–ø –∫–∞—Ä—Ç–æ—á–∫–∏: " + userFromApi.CardType + " –í–∞–ª—é—Ç–∞: " + userFromApi.Currency)
	//		})
	//		h.bot.Handle(&buttonDollars, func(c tb.Context) error {
	//			rabbitDataSelect := &messaging.RabbitMQ{
	//				Operation: "select",
	//				User: &entities.User{
	//					ID: c.Sender().ID,
	//				},
	//			}
	//
	//			userFromBank, err := h.rabbitMQConn.SetupAndConsume(messaging.BankService, rabbitDataSelect)
	//			if err != nil || userFromBank == nil {
	//				h.log.Error("failed to get user from db", slog.String("error", err.Error()))
	//				return c.Send("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.")
	//			}
	//
	//			rabbitDataUser := &messaging.RabbitMQ{
	//				Operation: "user",
	//				User: &entities.User{
	//					Token:    userFromBank.Token,
	//					CardType: buttonBlack.Unique,
	//					Currency: buttonDollars.Unique,
	//				},
	//			}
	//
	//			userFromApi, err := h.rabbitMQConn.SetupAndConsume(messaging.ApiService, rabbitDataUser)
	//			if err != nil || userFromApi == nil {
	//				h.log.Error("failed to get user data from api service", slog.String("error", err.Error()))
	//				return c.Send("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
	//			}
	//
	//			return c.Send("–ë–∞–ª–∞–Ω—Å: " + userFromApi.Balance + " –¢–∏–ø –∫–∞—Ä—Ç–æ—á–∫–∏: " + userFromApi.CardType + " –í–∞–ª—é—Ç–∞: " + userFromApi.Currency)
	//		})
	//		h.bot.Handle(&buttonHryvnia, func(c tb.Context) error {
	//			rabbitDataSelect := &messaging.RabbitMQ{
	//				Operation: "select",
	//				User: &entities.User{
	//					ID: c.Sender().ID,
	//				},
	//			}
	//
	//			userFromBank, err := h.rabbitMQConn.SetupAndConsume(messaging.BankService, rabbitDataSelect)
	//			if err != nil || userFromBank == nil {
	//				h.log.Error("failed to get user from db", slog.String("error", err.Error()))
	//				return c.Send("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.")
	//			}
	//
	//			rabbitDataUser := &messaging.RabbitMQ{
	//				Operation: "user",
	//				User: &entities.User{
	//					Token:    userFromBank.Token,
	//					CardType: buttonBlack.Unique,
	//					Currency: buttonHryvnia.Unique,
	//				},
	//			}
	//
	//			userFromApi, err := h.rabbitMQConn.SetupAndConsume(messaging.ApiService, rabbitDataUser)
	//			if err != nil || userFromApi == nil {
	//				h.log.Error("failed to get user data from api service", slog.String("error", err.Error()))
	//				return c.Send("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
	//			}
	//
	//			return c.Send("–ë–∞–ª–∞–Ω—Å: " + userFromApi.Balance + " –¢–∏–ø –∫–∞—Ä—Ç–æ—á–∫–∏: " + userFromApi.CardType + " –í–∞–ª—é—Ç–∞: " + userFromApi.Currency)
	//		})
	//		return nil
	//	})
	//	return nil
	//})
}
